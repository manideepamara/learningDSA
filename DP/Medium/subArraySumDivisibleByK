
    //with O(n) time and O(k) space
    //https://leetcode.com/problems/continuous-subarray-sum/
    bool checkSubarraySum(vector<int>& nums, int k) {
        map<int,int> dp;
        int n = nums.size();
        int sum = 0;
        dp[0]=-1;
        for(int i=0;i<n;i++){
            sum+=nums[i];
            int rem = sum%k;
            if(rem<0)
                rem+=k;
            if(dp.count(rem)==0)
                dp[rem]=i;
            else if(i-dp[rem]>=2)
                return true;   
        }
        return false;
    }
