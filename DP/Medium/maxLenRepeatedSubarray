//with O(n*n) time and space
//https://leetcode.com/problems/maximum-length-of-repeated-subarray/
//we can optimize it to O(n) space by taking dp for prev and current 
    int findLength(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int dp[m+1][n+1];
        memset(dp,0,sizeof(dp));
        int ma = 0;
        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(nums1[i-1]==nums2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                ma = max(ma,dp[i][j]);
            }
        }
        return ma;
    }
