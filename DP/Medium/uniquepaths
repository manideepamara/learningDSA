
    //https://leetcode.com/problems/unique-paths/
    //solution with O(m*n) time and O(n) space
    int uniquePaths(int m, int n) {
        int dp[n];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0&&j==0)
                    dp[j]=1;
                if(j-1>=0)
                    dp[j]+=dp[j-1];
            }
        }
        return dp[n-1];
    }
    
    
    //solution with O(m*n) time and O(m*n) space
    int uniquePaths(int m, int n) {
        int dp[m][n];
        memset(dp,0,sizeof(dp));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0&&j==0)
                    dp[i][j]=1;
                if(i-1>=0)
                    dp[i][j]+=dp[i-1][j];
                if(j-1>=0)
                    dp[i][j]+=dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }

