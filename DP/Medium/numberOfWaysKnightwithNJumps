   //with O(n*20) time and O(10) space
   //f(n,step)=  ____f(prev,step-1) where prev is number from that to reach n(ex: to reach 0 we can come only from 4,6)
                 \___1 if step = 1
   // ans = sum(f(i,step) i from 0 to 10)
    
    int knightDialer(int n) {
        int ways[10];
        for(int i=0;i<10;i++)
            ways[i]=1;
        int prev[10];
        int c = 0;
        map<int,vector<int>> table;
        table[0]={4,6};
        table[1]={6,8};
        table[2]={7,9};
        table[3]={4,8};
        table[4]={0,3,9};
        table[5]={};
        table[6]={0,1,7};
        table[7]={2,6};
        table[8]={1,3};
        table[9]={2,4};
        while(c<n-1){
            for(int i=0;i<10;i++){
                prev[i]=ways[i];
                ways[i]=0;
            }
            for(int i=0;i<10;i++){
                for(auto from:table[i]){
                    long total = ways[i]+prev[from];
                    ways[i]=total%1000000007;
                }
            }
            c++; 
        }
        long sum  =0;
        for(int i=0;i<10;i++)
            //cout << ways[i] << ",";
           sum=(sum+ways[i])%1000000007;
        return sum;
    }
