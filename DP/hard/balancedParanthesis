

    //Approach 1
    int longestValidParentheses(string s) {
        // very optimised approch 
        //with O(1) space and O(n)
        //maintaining two pointers left and right which holds left and right brace frequency
        //as traversing from left to right, always follow the condition left >= right 
        //at any point of time if left == right means balanced so update max Length if balanced length is max
        //make right and left 0 if right > lefyt
        //similarly traversing vice versa
        
        //this works only if entire string contains one type of closed and open braces
        int n = s.length();
        int right=0,left=0,maxLen=0;
        for(int i=0;i<n;i++){
            
            if(s[i]=='(')
                left++;
            else
                right++;
            if(left==right)
                maxLen = max(maxLen,2*left); //for length both left and right count
            if(right>left)
                right=left=0; 
                
        }
        left=right=0;
        for(int i=n-1;i>=0;i--){
            if(s[i]=='(')
                left++;
            else
                right++;
            if(left==right)
                maxLen = max(maxLen,2*left);
            if(left>right)
                right=left=0;
        }
        return maxLen;
    }
    
    
    //Approach 2
    int longestValidParentheses(string s) {
        // this is the best solution if we extend our use case to different paranthesis.
        //time complexity : O(n)
        //space complexity: O(n);
        int n = s.length();
        if(n==0)
            return 0;a
        int dp[n];
        int max=0;
        for(int i=0;i<n;i++){
            if(s[i]==')' && i-1>=0 && i-dp[i-1]-1>=0 &&s[i-dp[i-1]-1]=='('){
                dp[i]=2+dp[i-1]+((i-dp[i-1]-2>=0)?dp[i-dp[i-1]-2]:0);
            }else{
                dp[i]=0;
            }
            if(dp[i]>max)
                max = dp[i];
        }
        return max;
    }
    
