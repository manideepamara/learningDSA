

    //https://leetcode.com/problems/minimum-cost-to-merge-stones/
    //O(n*n) space and time
    int mergeStones(vector<int>& stones, int k) {
        int n = stones.size();
        if((n-k)%(k-1) != 0)
            return -1;
        int dp[n][n];
        int cumSum[n];
        for(int i=0;i<n;i++){
            if(i==0)
                cumSum[i]=stones[i];
            else
                cumSum[i]=cumSum[i-1]+stones[i];
        }
        memset(dp,0,sizeof(dp));
        for(int len = k-1;len<n;len++){
            for(int l = 0,r=l+len;r<n;l++,r++){
                if(len == k-1)
                    dp[l][r] = cumSum[r]-cumSum[l]+stones[l];
                else{
                    int minValue = INT_MAX;
                    for(int cut = l;cut<r;cut+=k-1){
                        minValue = min(minValue,dp[l][cut]+dp[cut+1][r]);
                    }
                    dp[l][r]=minValue;
                    if(len%(k-1)==0)
                        dp[l][r]=minValue+cumSum[r]-cumSum[l]+stones[l];
                }
            }
        }
        return dp[0][n-1]>=INT_MAX?-1:dp[0][n-1];
    }
