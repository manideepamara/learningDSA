
    //for more info. https://leetcode.com/problems/frog-jump/
    //with O(n*n) time and spaace
    bool canCross(vector<int>& stones) {
        map<int,set<int>> mp;
        for(auto stone:stones){
            mp[stone] = {};
        }
        mp[0].insert(0);
        int n = stones.size();
        for(int i=0;i<n;i++){
            for(auto k:mp[stones[i]]){
                for(int step=k-1;step<=k+1;step++){
                    if(step>0&&mp.count(stones[i]+step)>0){
                        mp[stones[i]+step].insert(step);
                    }
                }
            }
        }
        return mp[stones[n-1]].size()>0;
    }
    
    
    //memoized approach
    //global varables
    map<int,bool> mp;
    map<string,bool> dp;
    int target;
    bool helper(int prev,int stone){
        if(dp[to_string(prev)+"-"+to_string(stone)])
            return dp[to_string(prev)+"-"+to_string(stone)];
        if(stone>target){
            dp[to_string(prev)+"-"+to_string(stone)] = false;
            return false;
        }
        if(prev==0){
             dp[to_string(prev)+"-"+to_string(stone)] = false;
             return false;
        }
        if(stone>target){
             dp[to_string(prev)+"-"+to_string(stone)] = false;
            return false;
        }
        if(mp.count(stone)==0){
             dp[to_string(prev)+"-"+to_string(stone)] = false;
            return false;
        }
        if(stone==target){
             dp[to_string(prev)+"-"+to_string(stone)] = false;
            return true;
        }
        
         bool a = helper(prev-1,stone+prev-1);
         bool b = helper(prev,stone+prev);
         bool c = helper(prev+1,stone+prev+1);
         dp[to_string(prev)+"-"+to_string(stone)]=a||b||c;
         return dp[to_string(prev)+"-"+to_string(stone)] ;
    }
    bool canCross(vector<int>& stones) {
        int n = stones.size();
        target = stones[n-1];
        for(auto stone:stones)
            mp[stone]=true;
       return helper(1,1);
    }
