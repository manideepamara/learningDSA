
    //https://leetcode.com/problems/count-different-palindromic-subsequences/
    //with O(n*n) space and time
    int countPalindromicSubsequences(string s) {
        int mp[4],n=s.length();
        int next[n];
        int prev[n];
        long long  dp[n][n];
        memset(dp,0,sizeof(dp));
        memset(mp,-1,sizeof(mp));
        for(int i=0;i<n;i++){
            prev[i]=mp[s[i]-'a'];
            mp[s[i]-'a']=i;
        }
        memset(mp,-1,sizeof(mp));
        for(int i=n-1;i>=0;i--){
            next[i]=mp[s[i]-'a'];
            mp[s[i]-'a']=i;
        }
        // for(int i=0;i<n;i++){
        //     //cout << i << " " << prev[i] << " "<< next[i] << "\n";
        // }
        long long sum;
        for(int len=1;len<=n;len++){
            for(int i=0,j=i+len-1;j<n;i++,j++){
                if(len<=2)
                    sum=len;
                else if(s[i]!=s[j])
                    sum=(dp[i][j-1]%1000000007+dp[i+1][j]%1000000007-dp[i+1][j-1]%1000000007+1000000007)%1000000007;
                else{
                int p = prev[j];
                int n = next[i];
                if(n>p)
                    sum=(2*dp[i+1][j-1]%1000000007+2)%1000000007;
                else if(n==p)
                    sum=(2*dp[i+1][j-1]%1000000007+1)%1000000007;
                else
                    sum=(2*dp[i+1][j-1]%1000000007-dp[n+1][p-1]%1000000007+1000000007)%1000000007;
                }
                dp[i][j]=sum;
                //cout << dp[i][j];
            }
            //cout << "\n";
        }
        return dp[0][n-1];
    }
