      
      ## time complexity -> O(len(s)*len(s))
      ## space complexity -> O(n*n*n) (n=len(s) as we need to store combinations)
      ## please consider for more info. https://leetcode.com/problems/word-break-ii/submissions/
      
      vector<string> wordBreak(string s, vector<string>& wordDict) {
        
        //hero of the solution : map (as we are accessing in constant time)

        
        // map for storing all the words in a wordDict
        map<string,bool> mp;
        for(auto word: wordDict){
            mp[word] = true;
        }
        
        
        // the main reason to use map instead of vector to avoid extra space
        // map allocates memory on demand
        
        //dp[i] -> all possible combinations using wordDict to form substring(till ith 
        // charcter in string)
        
        map<int,vector<string>> dp;
        dp[0]={""} // (base case) as 0 means empty so ""(empty string)
        int len = s.length(); //length of the provided string
        for(int i=1;i<=len;i++){
            for(int j=0;j<i;j++){
                //cout << j << " " << i << " " << s.substr(j,i-j) << "\n";
                // forming all substring
                auto substr = s.substr(j,i-j);
                if(mp[substr]){ // if substring from(j to i) is present in mp(map) 
                    //concatenating all the combinations stored in dp[j] with substr
                    // adding all those to dp[i];
                     for(auto each: dp[j]){
                         if(j==0){
                             dp[i].push_back(each+substr);
                         }else{
                             dp[i].push_back(each+" "+substr);
                         }
                     }
                }
            }
        }
        // since we need to return all the possible combinations for s.
        return dp[len];
        
    }
