    //with O(n*n*n) time and O(n) space
    //https://leetcode.com/problems/4sum
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1])
                continue;
            
            for(int j=i+1;j<n;j++){
                if(j>i+1 && nums[j]==nums[j-1])
                    continue;
                long sum = nums[i]+nums[j];
                int l = j+1,r=n-1;
            
                while(l<r){
                    //cout <<nums[i] << nums[j] << nums[l] << nums[r] <<"\n";
                    long total = sum+nums[l]+nums[r];
                   
                    if(total==target){
                        res.push_back({nums[i],nums[j],nums[l],nums[r]});
                        l++;
                        r--;
                        while(r>0 && nums[r+1]==nums[r])
                        r--;
                    }
                    else if(total>target)
                        r--;
                    else
                        l++;
                }
            }
        }
        return res;
    }
