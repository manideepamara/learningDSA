    //with O(n*n) time and space
    //https://leetcode.com/problems/3sum
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        vector<vector<int>> s;
        for(int i=0;i<n;i++){
            if(i>0 && nums[i]==nums[i-1])
                continue;
            int l=i+1,r=n-1;
            int sum = -nums[i];
            while(l<r){
                int value = nums[l]+nums[r];
                if(value==sum){
                    s.push_back({nums[i],nums[l],nums[r]});
                    l++;
                    r--;
                    while(nums[r+1]==nums[r]&&r>0)
                        r--;
                }else if(value<sum){
                    l++;
                }else{
                    r--;
                }
            }
        }
        return s;
    }
