   //https://leetcode.com/problems/jump-game-ii/submissions/
   
   
   //with O(n) time and constant space
   int jump(vector<int>& nums) {
        int n = nums.size();
        int des = nums[0];
        int current = 0;
        int jump = 0;
        for(int i = 0;i<n-1;i++){
            des = max(des,i+nums[i]);
            if(i==current){
                current = des;
                jump++;
            }
        }
        return jump;
    }
    
    
    //with O(n*n) time and O(n) space
    int jump(vector<int>& nums) {
        int n = nums.size();
        int dp[n];
        memset(dp,-1,sizeof(dp));
        dp[0]=0;
        for(int i=0;i<n;i++){
            if(dp[i]!=-1){
                for(int j=i+1;j<n &&j<=nums[i]+i;j++){
                    dp[j]=dp[j]==-1?dp[i]+1:min(dp[j],dp[i]+1);
                }
            }
        }
        return dp[n-1];
    }



    
