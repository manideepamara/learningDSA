
    //tc : O(n)
    //sc : O(n)
    //https://leetcode.com/problems/basic-calculator/
    
    int precedence(char op){
        if(op=='+'||op=='-')
            return 1;
        return 0;
    
    }
    vector<int> rpn(string s){
        stack<char> op;
        vector<int> res;
        int num=0;
        int isStart=1;
        int lastNum =0;
        for(auto ch:s){
            if(ch==' ')
                continue;
          
            if(ch>='0'&&ch<='9'){
                num*=10;
                num+=(ch-'0');
                lastNum=1;
                isStart=0;
            }else if(ch==')'){
                    if(lastNum)
                       res.push_back(num);
                   lastNum=0;
                   num=0;
                while(op.top()!='('){
                    res.push_back((int)op.top());
                    op.pop();
                }
                op.pop();
            }else if(ch=='('){
                op.push('(');
                isStart=1;
            }
               
            else{
                if(lastNum||isStart)
                    res.push_back(num);
                lastNum=0;
                
                num=0; 
                while(op.size()>0 && (precedence(ch)<=precedence(op.top()))){
                    res.push_back(op.top());
                    op.pop();
                }
                op.push(ch);
            }
           
        }
        if(lastNum)
            res.push_back(num);
        num=0;
        lastNum=0;
        while(op.size()>0){
            res.push_back(op.top());
            op.pop();
        }
        return res;
    }
    int posfixEval(vector<int> expr){
        stack<int> val;
        for(auto ch:expr){
            
            if(ch=='+'||ch=='-'){
                int b = val.top();
                val.pop();
                int a = val.top();
                val.pop();
                if(ch=='+')
                    val.push(a+b);
                else
                    val.push(a-b);
            }else
                val.push(ch);
        }
        
        return val.top();
    }   
    int calculate(string s) {
        return posfixEval(rpn(s));
       
    }
